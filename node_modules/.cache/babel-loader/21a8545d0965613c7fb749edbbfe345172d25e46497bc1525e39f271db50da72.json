{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useSignup = url => {\n  _s();\n  /* Declaring a User structure to match database format */\n\n  const [error, setError] = useState('');\n  const [isPending, setIsPending] = useState(false);\n  const [data, setData] = useState();\n  const [options, setOptions] = useState({}); /* Special type for fetch Options */\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  /* Creating a fetchPostOption function that will create a specific POST Fetch option */\n  const fetchPostOption = dataToPost => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dataToPost)\n    });\n    console.log(\"coucou\");\n    console.log(dataToPost);\n  };\n\n  /* useEffect hook to trigger fetch */\n  useEffect(() => {\n    /* Creating a signup function to be called upon user signup */\n    const signup = async fetchOptions => {\n      setError('');\n      setIsPending(true);\n      const res = await fetch(url, fetchOptions);\n      const outputData = await res.json();\n      if (!res.ok) {\n        console.log(\"Could not fetch data\");\n        setError(Object.values(outputData.error).map(x => x).join(', '));\n        setIsPending(false);\n      } else {\n        console.log('Data successfully posted');\n        setIsLoggedIn(true);\n        console.log({\n          ...outputData,\n          isLoggedIn\n        });\n        setData(outputData);\n        setError('');\n        setIsPending(false);\n      }\n    };\n    signup(options);\n  }, [url, options]);\n  return {\n    fetchPostOption,\n    data,\n    isPending,\n    error\n  };\n};\n_s(useSignup, \"YLACSq93/S9WwdHbRExH7Ff8wKM=\");","map":{"version":3,"names":["useState","useEffect","useSignup","url","error","setError","isPending","setIsPending","data","setData","options","setOptions","isLoggedIn","setIsLoggedIn","fetchPostOption","dataToPost","method","headers","body","JSON","stringify","console","log","signup","fetchOptions","res","fetch","outputData","json","ok","Object","values","map","x","join"],"sources":["D:/Code/board-game/ts_front/src/hooks/useSignup.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n\r\nexport const useSignup = (url: RequestInfo) => {\r\n\r\n    /* Declaring a User structure to match database format */\r\n    interface User {\r\n        email: string,\r\n        username: string,\r\n        password: string,\r\n    }\r\n\r\n    const [error, setError] = useState('')\r\n    const [isPending, setIsPending] = useState(false)\r\n    const [data, setData] = useState<User>()\r\n    const [options, setOptions] = useState<RequestInit>({}) /* Special type for fetch Options */\r\n    const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false)\r\n\r\n\r\n    /* Creating a fetchPostOption function that will create a specific POST Fetch option */\r\n    const fetchPostOption = (dataToPost: User) => {\r\n        setOptions({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(dataToPost)\r\n        })\r\n        console.log(\"coucou\")\r\n        console.log(dataToPost)\r\n    }\r\n\r\n\r\n    /* useEffect hook to trigger fetch */\r\n    useEffect(() => {\r\n\r\n        /* Creating a signup function to be called upon user signup */\r\n        const signup = async (fetchOptions: RequestInit) => {\r\n\r\n            setError('')\r\n            setIsPending(true)\r\n        \r\n            const res = await fetch(url, fetchOptions)\r\n            const outputData = await res.json()\r\n\r\n            if (!res.ok) {\r\n                console.log(\"Could not fetch data\")\r\n                setError(Object.values(outputData.error).map(x => x).join(', '))\r\n                setIsPending(false)\r\n\r\n            } else {\r\n                console.log('Data successfully posted')\r\n                setIsLoggedIn(true)\r\n                console.log({ ...outputData, isLoggedIn })\r\n                setData(outputData)\r\n                setError('')\r\n                setIsPending(false)\r\n            }\r\n\r\n        }\r\n\r\n        signup(options)\r\n\r\n    }, [url, options])\r\n\r\n    \r\n    return { fetchPostOption, data, isPending, error }\r\n\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3C,OAAO,MAAMC,SAAS,GAAIC,GAAgB,IAAK;EAAA;EAE3C;;EAOA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,EAAQ;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAc,CAAC,CAAC,CAAC,EAAC;EACxD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAU,KAAK,CAAC;;EAG5D;EACA,MAAMc,eAAe,GAAIC,UAAgB,IAAK;IAC1CJ,UAAU,CAAC;MACPK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU;IACnC,CAAC,CAAC;IACFM,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBD,OAAO,CAACC,GAAG,CAACP,UAAU,CAAC;EAC3B,CAAC;;EAGD;EACAd,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMsB,MAAM,GAAG,MAAOC,YAAyB,IAAK;MAEhDnB,QAAQ,CAAC,EAAE,CAAC;MACZE,YAAY,CAAC,IAAI,CAAC;MAElB,MAAMkB,GAAG,GAAG,MAAMC,KAAK,CAACvB,GAAG,EAAEqB,YAAY,CAAC;MAC1C,MAAMG,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;MAEnC,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE;QACTR,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnCjB,QAAQ,CAACyB,MAAM,CAACC,MAAM,CAACJ,UAAU,CAACvB,KAAK,CAAC,CAAC4B,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChE3B,YAAY,CAAC,KAAK,CAAC;MAEvB,CAAC,MAAM;QACHc,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvCT,aAAa,CAAC,IAAI,CAAC;QACnBQ,OAAO,CAACC,GAAG,CAAC;UAAE,GAAGK,UAAU;UAAEf;QAAW,CAAC,CAAC;QAC1CH,OAAO,CAACkB,UAAU,CAAC;QACnBtB,QAAQ,CAAC,EAAE,CAAC;QACZE,YAAY,CAAC,KAAK,CAAC;MACvB;IAEJ,CAAC;IAEDgB,MAAM,CAACb,OAAO,CAAC;EAEnB,CAAC,EAAE,CAACP,GAAG,EAAEO,OAAO,CAAC,CAAC;EAGlB,OAAO;IAAEI,eAAe;IAAEN,IAAI;IAAEF,SAAS;IAAEF;EAAM,CAAC;AAEtD,CAAC;AAAA,GAjEYF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}