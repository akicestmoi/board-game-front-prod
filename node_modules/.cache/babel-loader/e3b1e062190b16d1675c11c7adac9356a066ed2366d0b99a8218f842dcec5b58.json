{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEventSource = void 0;\nvar react_1 = require(\"react\");\nvar use_websocket_1 = require(\"./use-websocket\");\nvar constants_1 = require(\"./constants\");\nexports.useEventSource = function (url, _a, connect) {\n  if (_a === void 0) {\n    _a = constants_1.DEFAULT_EVENT_SOURCE_OPTIONS;\n  }\n  if (connect === void 0) {\n    connect = true;\n  }\n  var withCredentials = _a.withCredentials,\n    events = _a.events,\n    options = __rest(_a, [\"withCredentials\", \"events\"]);\n  var optionsWithEventSource = __assign(__assign({}, options), {\n    eventSourceOptions: {\n      withCredentials: withCredentials\n    }\n  });\n  var eventsRef = react_1.useRef(constants_1.EMPTY_EVENT_HANDLERS);\n  if (events) {\n    eventsRef.current = events;\n  }\n  var _b = use_websocket_1.useWebSocket(url, optionsWithEventSource, connect),\n    lastMessage = _b.lastMessage,\n    readyState = _b.readyState,\n    getWebSocket = _b.getWebSocket;\n  react_1.useEffect(function () {\n    if (lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.type) {\n      Object.entries(eventsRef.current).forEach(function (_a) {\n        var type = _a[0],\n          handler = _a[1];\n        if (type === lastMessage.type) {\n          handler(lastMessage);\n        }\n      });\n    }\n  }, [lastMessage]);\n  return {\n    lastEvent: lastMessage,\n    readyState: readyState,\n    getEventSource: getWebSocket\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGaA,sBAAc,GAAG,UAC5BC,GAAqD,EACrDC,EAA0F,EAC1FC,OAAuB;EADvB;IAAAD,KAA8DE,wCAA4B;EAAA;EAC1F;IAAAD,cAAuB;EAAA;EADrB,mBAAe;IAAEE,MAAM;IAAKC,OAAO,cAArC,6BAAuC,CAAF;EAGrC,IAAMC,sBAAsB,yBACrBD,OAAO;IACVE,kBAAkB,EAAE;MAClBC,eAAe;;EAChB,EACJ;EACD,IAAMC,SAAS,GAAGC,cAAM,CAA2BP,gCAAoB,CAAC;EACxE,IAAIC,MAAM,EAAE;IACVK,SAAS,CAACE,OAAO,GAAGP,MAAM;;EAGtB,SAIFQ,4BAAY,CACdZ,GAAG,EACHM,sBAAsB,EACtBJ,OAAO,CACR;IAPCW,WAAW;IACXC,UAAU;IACVC,YAAY,kBAKb;EAEDL,iBAAS,CAAC;IACR,IAAIG,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEG,IAAI,EAAE;MACnBC,MAAM,CAACC,OAAO,CAACT,SAAS,CAACE,OAAO,CAAC,CAACQ,OAAO,CAAC,UAAClB,EAAe;YAAde,IAAI;UAAEI,OAAO;QACrD,IAAIJ,IAAI,KAAKH,WAAW,CAACG,IAAI,EAAE;UAC3BI,OAAO,CAACP,WAAW,CAAC;;MAE5B,CAAC,CAAC;;EAER,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,OAAO;IACLQ,SAAS,EAAER,WAAW;IACtBC,UAAU;IACVQ,cAAc,EAAEP;GACjB;AACH,CAAC","names":["exports","url","_a","connect","constants_1","events","options","optionsWithEventSource","eventSourceOptions","withCredentials","eventsRef","react_1","current","use_websocket_1","lastMessage","readyState","getWebSocket","type","Object","entries","forEach","handler","lastEvent","getEventSource"],"sources":["D:\\Code\\board-game\\ts_front\\node_modules\\react-use-websocket\\src\\lib\\use-event-source.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\nimport { useWebSocket } from './use-websocket'\nimport { DEFAULT_EVENT_SOURCE_OPTIONS, EMPTY_EVENT_HANDLERS } from './constants'\nimport { EventSourceOptions, Options, EventSourceHook, EventSourceEventHandlers } from './types';\n\nexport const useEventSource = (\n  url: string | (() => string | Promise<string>) | null,\n  { withCredentials, events, ...options }: EventSourceOptions = DEFAULT_EVENT_SOURCE_OPTIONS,\n  connect: boolean = true,\n): EventSourceHook => {\n  const optionsWithEventSource: Options = {\n      ...options,\n      eventSourceOptions: {\n        withCredentials,\n      }\n  };\n  const eventsRef = useRef<EventSourceEventHandlers>(EMPTY_EVENT_HANDLERS);\n  if (events) {\n    eventsRef.current = events\n  }\n\n  const {\n    lastMessage,\n    readyState,\n    getWebSocket,\n  } = useWebSocket(\n    url,\n    optionsWithEventSource,\n    connect,\n  );\n\n  useEffect(() => {\n    if (lastMessage?.type) {\n        Object.entries(eventsRef.current).forEach(([type, handler]) => {\n            if (type === lastMessage.type) {\n                handler(lastMessage);\n            }\n        });\n    }\n  }, [lastMessage]);\n\n  return {\n    lastEvent: lastMessage,\n    readyState,\n    getEventSource: getWebSocket,\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}