{"ast":null,"code":"var _s = $RefreshSig$();\n/* Base */\nimport { useEffect, useState } from \"react\";\nexport const useFetch = function (url) {\n  _s();\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  /* Declaring State Object */\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState();\n  const [options, setOptions] = useState({}); /* Special type for fetch Options */\n\n  /* Creating a fetchPostOption function that will create a specific POST Fetch option */\n  const fetchPostOption = dataToPost => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(dataToPost)\n    });\n  };\n\n  /* useEffect hook to trigger fetch */\n  useEffect(() => {\n    /* Declaring the fetch function to be used later */\n    const fetchData = async fetchOptions => {\n      setError(null);\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          ...fetchOptions\n        });\n        const outputData = await res.json();\n        if (!res.ok) {\n          setError(outputData.error);\n          throw new Error(res.statusText);\n        } else {\n          setData(outputData);\n          setError(null);\n          setIsPending(false);\n        }\n      } catch (err) {\n        console.log(\"Could not fetch data\");\n        setIsPending(false);\n      }\n    };\n\n    /* Calling the fetchData function depending on the declared method */\n    if (method === 'GET') {\n      fetchData({});\n    }\n    if (method === 'POST') {\n      fetchData(options);\n    }\n  }, [url, options, method]);\n  return {\n    fetchPostOption,\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"Ukm1mvT1wZmXZMmpnAOxbRVDYck=\");","map":{"version":3,"names":["useEffect","useState","useFetch","url","method","isPending","setIsPending","error","setError","data","setData","options","setOptions","fetchPostOption","dataToPost","headers","body","JSON","stringify","fetchData","fetchOptions","res","fetch","outputData","json","ok","Error","statusText","err","console","log"],"sources":["D:/Code/board-game/ts_front/src/hooks/useFetch.tsx"],"sourcesContent":["/* Base */\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\nexport const useFetch = (url: RequestInfo, method='GET') => {\r\n\r\n    /* Declaring a User structure to match database format */\r\n    interface Users {\r\n        email: String,\r\n        username: String,\r\n        password: String,\r\n        is_logged_in: Boolean\r\n    }\r\n\r\n\r\n    /* Declaring State Object */\r\n    const [isPending, setIsPending] = useState<boolean>(false)\r\n    const [error, setError] = useState<any>(null)\r\n    const [data, setData] = useState<Users>()\r\n    const [options, setOptions] = useState<RequestInit>({}) /* Special type for fetch Options */\r\n\r\n\r\n    /* Creating a fetchPostOption function that will create a specific POST Fetch option */\r\n    const fetchPostOption = (dataToPost: Users) => {\r\n        setOptions({\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(dataToPost)\r\n        })\r\n    }\r\n\r\n\r\n    /* useEffect hook to trigger fetch */\r\n    useEffect(() => {\r\n\r\n        /* Declaring the fetch function to be used later */\r\n        const fetchData = async (fetchOptions: RequestInit) => {\r\n\r\n            setError(null)\r\n            setIsPending(true)\r\n\r\n            try {\r\n                const res = await fetch(url, { ...fetchOptions })\r\n                const outputData = await res.json()\r\n                \r\n                if (!res.ok) {        \r\n                    setError(outputData.error)           \r\n                    throw new Error(res.statusText)\r\n                } else {\r\n                    setData(outputData)\r\n                    setError(null)\r\n                    setIsPending(false)\r\n                }\r\n\r\n            } \r\n            catch (err: any) {\r\n                console.log(\"Could not fetch data\")\r\n                setIsPending(false)\r\n            }\r\n        };\r\n\r\n\r\n        /* Calling the fetchData function depending on the declared method */\r\n        if (method === 'GET') {\r\n            fetchData({})\r\n        }\r\n        if (method === 'POST') {\r\n            fetchData(options)\r\n        }\r\n        \r\n    }, [url, options, method])\r\n\r\n    return { fetchPostOption, data, isPending, error }\r\n\r\n}"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAG3C,OAAO,MAAMC,QAAQ,GAAG,UAACC,GAAgB,EAAmB;EAAA;EAAA,IAAjBC,MAAM,uEAAC,KAAK;EAWnD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAM,IAAI,CAAC;EAC7C,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,EAAS;EACzC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAc,CAAC,CAAC,CAAC,EAAC;;EAGxD;EACA,MAAMY,eAAe,GAAIC,UAAiB,IAAK;IAC3CF,UAAU,CAAC;MACPR,MAAM,EAAE,MAAM;MACdW,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,UAAU;IACnC,CAAC,CAAC;EACN,CAAC;;EAGD;EACAd,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMmB,SAAS,GAAG,MAAOC,YAAyB,IAAK;MAEnDZ,QAAQ,CAAC,IAAI,CAAC;MACdF,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACA,MAAMe,GAAG,GAAG,MAAMC,KAAK,CAACnB,GAAG,EAAE;UAAE,GAAGiB;QAAa,CAAC,CAAC;QACjD,MAAMG,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;QAEnC,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE;UACTjB,QAAQ,CAACe,UAAU,CAAChB,KAAK,CAAC;UAC1B,MAAM,IAAImB,KAAK,CAACL,GAAG,CAACM,UAAU,CAAC;QACnC,CAAC,MAAM;UACHjB,OAAO,CAACa,UAAU,CAAC;UACnBf,QAAQ,CAAC,IAAI,CAAC;UACdF,YAAY,CAAC,KAAK,CAAC;QACvB;MAEJ,CAAC,CACD,OAAOsB,GAAQ,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;QACnCxB,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;;IAGD;IACA,IAAIF,MAAM,KAAK,KAAK,EAAE;MAClBe,SAAS,CAAC,CAAC,CAAC,CAAC;IACjB;IACA,IAAIf,MAAM,KAAK,MAAM,EAAE;MACnBe,SAAS,CAACR,OAAO,CAAC;IACtB;EAEJ,CAAC,EAAE,CAACR,GAAG,EAAEQ,OAAO,EAAEP,MAAM,CAAC,CAAC;EAE1B,OAAO;IAAES,eAAe;IAAEJ,IAAI;IAAEJ,SAAS;IAAEE;EAAM,CAAC;AAEtD,CAAC;AAAA,GAxEYL,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}