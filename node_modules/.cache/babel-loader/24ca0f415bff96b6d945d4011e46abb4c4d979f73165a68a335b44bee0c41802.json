{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function useTicTacToeLog(backendOutcome) {\n  _s();\n  const [error, setError] = useState(\"\");\n  const [gameLog, setGameLog] = useState([]);\n  const [gameStatus, setGameStatus] = useState({\n    firstPlayer: null,\n    secondPlayer: null,\n    currentTurn: null,\n    gameOver: false,\n    gameWinner: null,\n    isDraw: false\n  });\n  useEffect(() => {\n    if (backendOutcome.status === \"error\") {\n      switch (backendOutcome.category) {\n        case \"waiting_opponent\":\n          setError(\"Please wait for an opponent to join the game\");\n          break;\n        case \"game_over\":\n          setError(\"The game is already over\");\n          break;\n        case \"wrong_turn\":\n          setError(\"This is not your turn. You cannot play on oppent's turn\");\n          break;\n        case \"square_taken\":\n          setError(\"The selected square is already taken. Please choose another square\");\n          break;\n        default:\n          break;\n      }\n    } else if (backendOutcome.status === \"success\") {\n      switch (backendOutcome.category) {\n        case \"game_creation\":\n          setGameLog([...gameLog, \"Welcome XXX! The game is created\"]);\n          setGameStatus({\n            ...gameStatus,\n            firstPlayer: \"Someone\",\n            currentTurn: \"Someone\"\n          });\n          break;\n        case \"game_join\":\n          setGameLog([...gameLog, \"XXX joined the game\"]);\n          if (!gameStatus.secondPlayer) {\n            setGameStatus({\n              ...gameStatus,\n              secondPlayer: \"Someone else\"\n            });\n          }\n          break;\n        case \"game_leave\":\n          setGameLog([...gameLog, \"XXX left the game\"]);\n          break;\n        case \"turn_change\":\n          setGameLog([...gameLog, \"This is now XXX turn to play\"]);\n          setGameStatus({\n            ...gameStatus,\n            secondPlayer: \"Someone else\"\n          });\n          break;\n        case \"is_winner\":\n          setGameLog([...gameLog, \"Congratulation! XXX wins the game\"]);\n          setGameStatus({\n            ...gameStatus,\n            secondPlayer: \"Someone else\"\n          });\n          break;\n        case \"is_draw\":\n          setGameLog([...gameLog, \"The game ended in a draw!\"]);\n          setGameStatus({\n            ...gameStatus,\n            secondPlayer: \"Someone else\"\n          });\n          break;\n        default:\n          break;\n      }\n    }\n  }, [backendOutcome, gameLog, gameStatus]);\n  return {\n    gameStatus,\n    gameLog,\n    error\n  };\n}\n_s(useTicTacToeLog, \"wU4vUc7CD0JoLcW4TXda3IAP81Y=\");","map":{"version":3,"names":["useState","useEffect","useTicTacToeLog","backendOutcome","error","setError","gameLog","setGameLog","gameStatus","setGameStatus","firstPlayer","secondPlayer","currentTurn","gameOver","gameWinner","isDraw","status","category"],"sources":["D:/Code/board-game/ts_front/src/hooks/useTicTacToeLog.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\ninterface IGameStatus {\r\n    firstPlayer: string | null, \r\n    secondPlayer: string | null, \r\n    currentTurn: string | null, \r\n    gameOver: boolean, \r\n    gameWinner: string | null, \r\n    isDraw: boolean\r\n}\r\n\r\n\r\nexport default function useTicTacToeLog(backendOutcome: any) {\r\n\r\n    const [ error, setError ] = useState<string>(\"\")\r\n    const [ gameLog, setGameLog ] = useState<string[]>([])\r\n    const [ gameStatus, setGameStatus ] = useState<IGameStatus>({ firstPlayer: null, secondPlayer: null, currentTurn: null, gameOver: false, gameWinner: null, isDraw: false})\r\n\r\n    useEffect(() => {\r\n        \r\n        if (backendOutcome.status === \"error\") {\r\n            switch (backendOutcome.category) {\r\n                case \"waiting_opponent\":\r\n                    setError(\"Please wait for an opponent to join the game\")\r\n                    break\r\n                case \"game_over\":\r\n                    setError(\"The game is already over\")\r\n                    break\r\n                case \"wrong_turn\":\r\n                    setError(\"This is not your turn. You cannot play on oppent's turn\")\r\n                    break\r\n                case \"square_taken\":\r\n                    setError(\"The selected square is already taken. Please choose another square\")\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        else if (backendOutcome.status === \"success\") {\r\n            switch (backendOutcome.category) {\r\n                case \"game_creation\":\r\n                    setGameLog([ ...gameLog, \"Welcome XXX! The game is created\" ])\r\n                    setGameStatus({ ...gameStatus, firstPlayer: \"Someone\", currentTurn: \"Someone\" })\r\n                    break\r\n                case \"game_join\":\r\n                    setGameLog([ ...gameLog, \"XXX joined the game\" ])\r\n                    if (!gameStatus.secondPlayer) {\r\n                        setGameStatus({ ...gameStatus, secondPlayer: \"Someone else\" })\r\n                    }\r\n                    break\r\n                case \"game_leave\":\r\n                    setGameLog([ ...gameLog, \"XXX left the game\" ])\r\n                    break\r\n                case \"turn_change\":\r\n                    setGameLog([ ...gameLog, \"This is now XXX turn to play\" ])\r\n                    setGameStatus({ ...gameStatus, secondPlayer: \"Someone else\" })\r\n                    break\r\n                case \"is_winner\":\r\n                    setGameLog([ ...gameLog, \"Congratulation! XXX wins the game\" ])\r\n                    setGameStatus({ ...gameStatus, secondPlayer: \"Someone else\" })\r\n                    break\r\n                case \"is_draw\":\r\n                    setGameLog([ ...gameLog, \"The game ended in a draw!\" ])\r\n                    setGameStatus({ ...gameStatus, secondPlayer: \"Someone else\" })\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n\r\n    }, [backendOutcome, gameLog, gameStatus])\r\n        \r\n\r\n    return { gameStatus, gameLog, error }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAY3C,eAAe,SAASC,eAAe,CAACC,cAAmB,EAAE;EAAA;EAEzD,MAAM,CAAEC,KAAK,EAAEC,QAAQ,CAAE,GAAGL,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAAEM,OAAO,EAAEC,UAAU,CAAE,GAAGP,QAAQ,CAAW,EAAE,CAAC;EACtD,MAAM,CAAEQ,UAAU,EAAEC,aAAa,CAAE,GAAGT,QAAQ,CAAc;IAAEU,WAAW,EAAE,IAAI;IAAEC,YAAY,EAAE,IAAI;IAAEC,WAAW,EAAE,IAAI;IAAEC,QAAQ,EAAE,KAAK;IAAEC,UAAU,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC,CAAC;EAE1Kd,SAAS,CAAC,MAAM;IAEZ,IAAIE,cAAc,CAACa,MAAM,KAAK,OAAO,EAAE;MACnC,QAAQb,cAAc,CAACc,QAAQ;QAC3B,KAAK,kBAAkB;UACnBZ,QAAQ,CAAC,8CAA8C,CAAC;UACxD;QACJ,KAAK,WAAW;UACZA,QAAQ,CAAC,0BAA0B,CAAC;UACpC;QACJ,KAAK,YAAY;UACbA,QAAQ,CAAC,yDAAyD,CAAC;UACnE;QACJ,KAAK,cAAc;UACfA,QAAQ,CAAC,oEAAoE,CAAC;UAC9E;QACJ;UACI;MAAK;IAEjB,CAAC,MACI,IAAIF,cAAc,CAACa,MAAM,KAAK,SAAS,EAAE;MAC1C,QAAQb,cAAc,CAACc,QAAQ;QAC3B,KAAK,eAAe;UAChBV,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAE,kCAAkC,CAAE,CAAC;UAC9DG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEE,WAAW,EAAE,SAAS;YAAEE,WAAW,EAAE;UAAU,CAAC,CAAC;UAChF;QACJ,KAAK,WAAW;UACZL,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAE,qBAAqB,CAAE,CAAC;UACjD,IAAI,CAACE,UAAU,CAACG,YAAY,EAAE;YAC1BF,aAAa,CAAC;cAAE,GAAGD,UAAU;cAAEG,YAAY,EAAE;YAAe,CAAC,CAAC;UAClE;UACA;QACJ,KAAK,YAAY;UACbJ,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAE,mBAAmB,CAAE,CAAC;UAC/C;QACJ,KAAK,aAAa;UACdC,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAE,8BAA8B,CAAE,CAAC;UAC1DG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEG,YAAY,EAAE;UAAe,CAAC,CAAC;UAC9D;QACJ,KAAK,WAAW;UACZJ,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAE,mCAAmC,CAAE,CAAC;UAC/DG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEG,YAAY,EAAE;UAAe,CAAC,CAAC;UAC9D;QACJ,KAAK,SAAS;UACVJ,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAE,2BAA2B,CAAE,CAAC;UACvDG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEG,YAAY,EAAE;UAAe,CAAC,CAAC;UAC9D;QACJ;UACI;MAAK;IAEjB;EAEJ,CAAC,EAAE,CAACR,cAAc,EAAEG,OAAO,EAAEE,UAAU,CAAC,CAAC;EAGzC,OAAO;IAAEA,UAAU;IAAEF,OAAO;IAAEF;EAAM,CAAC;AACzC;AAAC,GA9DuBF,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}