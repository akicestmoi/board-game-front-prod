{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function useTictactoeLog(backendOutcome) {\n  _s();\n  const [error, setError] = useState(\"\");\n  const [gameLog, setGameLog] = useState([]);\n  const [gameStatus, setGameStatus] = useState({\n    firstPlayer: null,\n    secondPlayer: null,\n    currentTurn: null,\n    gameOver: false,\n    gameWinner: null,\n    isDraw: false\n  });\n  useEffect(() => {\n    if (backendOutcome && backendOutcome.status === \"error\") {\n      switch (backendOutcome.data.category) {\n        case \"waiting_opponent\":\n          setError(\"Please wait for an opponent to join the game\");\n          break;\n        case \"game_over\":\n          setError(\"The game is already over\");\n          break;\n        case \"wrong_turn\":\n          setError(\"This is not your turn. You cannot play on oppent's turn\");\n          break;\n        case \"square_taken\":\n          setError(\"The selected square is already taken. Please choose another square\");\n          break;\n        default:\n          break;\n      }\n    } else if (backendOutcome && backendOutcome.status === \"success\") {\n      setGameStatus({\n        ...gameStatus,\n        firstPlayer: backendOutcome.data.board_status.creator,\n        secondPlayer: backendOutcome.data.board_status.opponent,\n        currentTurn: backendOutcome.data.board_status.current_turn,\n        gameOver: backendOutcome.data.board_status.is_finished,\n        gameWinner: backendOutcome.data.board_status.winner,\n        isDraw: backendOutcome.data.board_status.draw\n      });\n      setError(\"\");\n      switch (backendOutcome.data.category) {\n        case \"game_creation\":\n          setGameLog([...gameLog, `Welcome ${backendOutcome.data.board_status.creator}! The game is created`]);\n          break;\n        case \"game_join\":\n          setGameLog([...gameLog, `${backendOutcome.data.board_status.creator} joined the game`]); /* */\n          break;\n        case \"game_leave\":\n          setGameLog([...gameLog, `${backendOutcome.data.board_status.creator} left the game`]); /* */\n          break;\n        case \"turn_change\":\n          setGameLog([...gameLog, `This is now ${backendOutcome.data.board_status.current_turn} turn to play`]);\n          break;\n        case \"is_winner\":\n          setGameLog([...gameLog, `Congratulation! ${backendOutcome.data.board_status.winner} wins the game`]);\n          break;\n        case \"is_draw\":\n          setGameLog([...gameLog, `The game ended in a draw!`]);\n          break;\n        default:\n          break;\n      }\n    }\n  }, [backendOutcome]);\n  return {\n    gameStatus,\n    gameLog,\n    error\n  };\n}\n_s(useTictactoeLog, \"mtSoG0ldogbFMRRh0QcJfq987kc=\");","map":{"version":3,"names":["useState","useEffect","useTictactoeLog","backendOutcome","error","setError","gameLog","setGameLog","gameStatus","setGameStatus","firstPlayer","secondPlayer","currentTurn","gameOver","gameWinner","isDraw","status","data","category","board_status","creator","opponent","current_turn","is_finished","winner","draw"],"sources":["D:/Code/board-game/ts_front/src/hooks/useTictactoeLog.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n\r\ninterface IGameStatus {\r\n    firstPlayer: string | null, \r\n    secondPlayer: string | null, \r\n    currentTurn: string | null, \r\n    gameOver: boolean, \r\n    gameWinner: string | null, \r\n    isDraw: boolean\r\n}\r\n\r\n\r\nexport default function useTictactoeLog(backendOutcome: any) {\r\n\r\n    const [ error, setError ] = useState<string>(\"\")\r\n    const [ gameLog, setGameLog ] = useState<string[]>([])\r\n    const [ gameStatus, setGameStatus ] = useState<IGameStatus>({ \r\n        firstPlayer: null, \r\n        secondPlayer: null, \r\n        currentTurn: null, \r\n        gameOver: false, \r\n        gameWinner: null, \r\n        isDraw: false\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (backendOutcome && backendOutcome.status === \"error\") {\r\n\r\n            switch (backendOutcome.data.category) {\r\n                case \"waiting_opponent\":\r\n                    setError(\"Please wait for an opponent to join the game\")\r\n                    break\r\n                case \"game_over\":\r\n                    setError(\"The game is already over\")\r\n                    break\r\n                case \"wrong_turn\":\r\n                    setError(\"This is not your turn. You cannot play on oppent's turn\")\r\n                    break\r\n                case \"square_taken\":\r\n                    setError(\"The selected square is already taken. Please choose another square\")\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        else if (backendOutcome && backendOutcome.status === \"success\") {\r\n\r\n            setGameStatus({ \r\n                ...gameStatus, \r\n                firstPlayer: backendOutcome.data.board_status.creator, \r\n                secondPlayer: backendOutcome.data.board_status.opponent, \r\n                currentTurn: backendOutcome.data.board_status.current_turn, \r\n                gameOver: backendOutcome.data.board_status.is_finished, \r\n                gameWinner: backendOutcome.data.board_status.winner, \r\n                isDraw: backendOutcome.data.board_status.draw\r\n            })\r\n            setError(\"\")\r\n            \r\n            switch (backendOutcome.data.category) {\r\n                case \"game_creation\":\r\n                    setGameLog([ ...gameLog, `Welcome ${backendOutcome.data.board_status.creator}! The game is created` ])\r\n                    break\r\n                case \"game_join\":\r\n                    setGameLog([ ...gameLog, `${backendOutcome.data.board_status.creator} joined the game` ]) /* */\r\n                    break\r\n                case \"game_leave\":\r\n                    setGameLog([ ...gameLog, `${backendOutcome.data.board_status.creator} left the game` ]) /* */\r\n                    break\r\n                case \"turn_change\":\r\n                    setGameLog([ ...gameLog, `This is now ${backendOutcome.data.board_status.current_turn} turn to play` ])\r\n                    break\r\n                case \"is_winner\":\r\n                    setGameLog([ ...gameLog, `Congratulation! ${backendOutcome.data.board_status.winner} wins the game` ])\r\n                    break\r\n                case \"is_draw\":\r\n                    setGameLog([ ...gameLog, `The game ended in a draw!` ])\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n\r\n    }, [backendOutcome])\r\n        \r\n\r\n    return { gameStatus, gameLog, error }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}