{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function useTictactoeLog(backendOutcome) {\n  _s();\n  const {\n    state\n  } = useAuthContext();\n  const [error, setError] = useState(\"\");\n  const [gameLog, setGameLog] = useState([]);\n  const [gameStatus, setGameStatus] = useState({\n    firstPlayer: null,\n    secondPlayer: null,\n    currentTurn: null,\n    gameOver: false,\n    gameWinner: null,\n    isDraw: false\n  });\n  useEffect(() => {\n    if (backendOutcome && backendOutcome.status === \"error\") {\n      switch (backendOutcome.data.category) {\n        case \"waiting_opponent\":\n          setError(\"Please wait for an opponent to join the game\");\n          break;\n        case \"game_over\":\n          setError(\"The game is already over\");\n          break;\n        case \"wrong_turn\":\n          setError(\"This is not your turn. You cannot play on oppent's turn\");\n          break;\n        case \"square_taken\":\n          setError(\"The selected square is already taken. Please choose another square\");\n          break;\n        default:\n          break;\n      }\n    } else if (backendOutcome && backendOutcome.status === \"success\") {\n      setError(\"\");\n      switch (backendOutcome.data.category) {\n        case \"game_creation\":\n          setGameLog([...gameLog, `Welcome ${state.username}! The game is created`]);\n          setGameStatus({\n            ...gameStatus,\n            firstPlayer: \"Someone\",\n            currentTurn: \"Someone\"\n          });\n          break;\n        case \"game_join\":\n          setGameLog([...gameLog, `XXX joined the game`]);\n          if (!gameStatus.secondPlayer) {\n            setGameStatus({\n              ...gameStatus,\n              secondPlayer: \"Someone else\"\n            });\n          }\n          break;\n        case \"game_leave\":\n          setGameLog([...gameLog, `XXX left the game`]);\n          break;\n        case \"turn_change\":\n          setGameLog([...gameLog, `This is now XXX turn to play`]);\n          setGameStatus({\n            ...gameStatus,\n            currentTurn: \"Switch\"\n          });\n          break;\n        case \"is_winner\":\n          setGameLog([...gameLog, `Congratulation! XXX wins the game`]);\n          setGameStatus({\n            ...gameStatus,\n            gameOver: true,\n            gameWinner: `XXX the winner`\n          });\n          break;\n        case \"is_draw\":\n          setGameLog([...gameLog, `The game ended in a draw!`]);\n          setGameStatus({\n            ...gameStatus,\n            gameOver: true,\n            isDraw: true\n          });\n          break;\n        default:\n          break;\n      }\n    }\n  }, [backendOutcome]);\n  return {\n    gameStatus,\n    gameLog,\n    error\n  };\n}\n_s(useTictactoeLog, \"+Ydv+/+9AVGavt2jYuJT222/cOk=\", true);","map":{"version":3,"names":["useState","useEffect","useTictactoeLog","backendOutcome","state","useAuthContext","error","setError","gameLog","setGameLog","gameStatus","setGameStatus","firstPlayer","secondPlayer","currentTurn","gameOver","gameWinner","isDraw","status","data","category","username"],"sources":["D:/Code/board-game/ts_front/src/hooks/useTictactoeLog.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n\r\ninterface IGameStatus {\r\n    firstPlayer: string | null, \r\n    secondPlayer: string | null, \r\n    currentTurn: string | null, \r\n    gameOver: boolean, \r\n    gameWinner: string | null, \r\n    isDraw: boolean\r\n}\r\n\r\n\r\nexport default function useTictactoeLog(backendOutcome: any) {\r\n\r\n    const { state } = useAuthContext()\r\n    const [ error, setError ] = useState<string>(\"\")\r\n    const [ gameLog, setGameLog ] = useState<string[]>([])\r\n    const [ gameStatus, setGameStatus ] = useState<IGameStatus>({ \r\n        firstPlayer: null, \r\n        secondPlayer: null, \r\n        currentTurn: null, \r\n        gameOver: false, \r\n        gameWinner: null, \r\n        isDraw: false\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (backendOutcome && backendOutcome.status === \"error\") {\r\n\r\n            switch (backendOutcome.data.category) {\r\n                case \"waiting_opponent\":\r\n                    setError(\"Please wait for an opponent to join the game\")\r\n                    break\r\n                case \"game_over\":\r\n                    setError(\"The game is already over\")\r\n                    break\r\n                case \"wrong_turn\":\r\n                    setError(\"This is not your turn. You cannot play on oppent's turn\")\r\n                    break\r\n                case \"square_taken\":\r\n                    setError(\"The selected square is already taken. Please choose another square\")\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n        else if (backendOutcome && backendOutcome.status === \"success\") {\r\n\r\n            setError(\"\")\r\n            switch (backendOutcome.data.category) {\r\n                case \"game_creation\":\r\n                    setGameLog([ ...gameLog, `Welcome ${state.username}! The game is created` ])\r\n                    setGameStatus({ ...gameStatus, firstPlayer: \"Someone\", currentTurn: \"Someone\" })\r\n                    break\r\n                case \"game_join\":\r\n                    setGameLog([ ...gameLog, `XXX joined the game` ])\r\n                    if (!gameStatus.secondPlayer) {\r\n                        setGameStatus({ ...gameStatus, secondPlayer: \"Someone else\" })\r\n                    }\r\n                    break\r\n                case \"game_leave\":\r\n                    setGameLog([ ...gameLog, `XXX left the game` ])\r\n                    break\r\n                case \"turn_change\":\r\n                    setGameLog([ ...gameLog, `This is now XXX turn to play` ])\r\n                    setGameStatus({ ...gameStatus, currentTurn: \"Switch\" })\r\n                    break\r\n                case \"is_winner\":\r\n                    setGameLog([ ...gameLog, `Congratulation! XXX wins the game` ])\r\n                    setGameStatus({ ...gameStatus, gameOver: true, gameWinner: `XXX the winner` })\r\n                    break\r\n                case \"is_draw\":\r\n                    setGameLog([ ...gameLog, `The game ended in a draw!` ])\r\n                    setGameStatus({ ...gameStatus, gameOver: true, isDraw: true })\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n\r\n    }, [backendOutcome])\r\n        \r\n\r\n    return { gameStatus, gameLog, error }\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAa3C,eAAe,SAASC,eAAe,CAACC,cAAmB,EAAE;EAAA;EAEzD,MAAM;IAAEC;EAAM,CAAC,GAAGC,cAAc,EAAE;EAClC,MAAM,CAAEC,KAAK,EAAEC,QAAQ,CAAE,GAAGP,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAAEQ,OAAO,EAAEC,UAAU,CAAE,GAAGT,QAAQ,CAAW,EAAE,CAAC;EACtD,MAAM,CAAEU,UAAU,EAAEC,aAAa,CAAE,GAAGX,QAAQ,CAAc;IACxDY,WAAW,EAAE,IAAI;IACjBC,YAAY,EAAE,IAAI;IAClBC,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE,KAAK;IACfC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;EACZ,CAAC,CAAC;EAGFhB,SAAS,CAAC,MAAM;IAEZ,IAAIE,cAAc,IAAIA,cAAc,CAACe,MAAM,KAAK,OAAO,EAAE;MAErD,QAAQf,cAAc,CAACgB,IAAI,CAACC,QAAQ;QAChC,KAAK,kBAAkB;UACnBb,QAAQ,CAAC,8CAA8C,CAAC;UACxD;QACJ,KAAK,WAAW;UACZA,QAAQ,CAAC,0BAA0B,CAAC;UACpC;QACJ,KAAK,YAAY;UACbA,QAAQ,CAAC,yDAAyD,CAAC;UACnE;QACJ,KAAK,cAAc;UACfA,QAAQ,CAAC,oEAAoE,CAAC;UAC9E;QACJ;UACI;MAAK;IAEjB,CAAC,MACI,IAAIJ,cAAc,IAAIA,cAAc,CAACe,MAAM,KAAK,SAAS,EAAE;MAE5DX,QAAQ,CAAC,EAAE,CAAC;MACZ,QAAQJ,cAAc,CAACgB,IAAI,CAACC,QAAQ;QAChC,KAAK,eAAe;UAChBX,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAG,WAAUJ,KAAK,CAACiB,QAAS,uBAAsB,CAAE,CAAC;UAC5EV,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEE,WAAW,EAAE,SAAS;YAAEE,WAAW,EAAE;UAAU,CAAC,CAAC;UAChF;QACJ,KAAK,WAAW;UACZL,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAG,qBAAoB,CAAE,CAAC;UACjD,IAAI,CAACE,UAAU,CAACG,YAAY,EAAE;YAC1BF,aAAa,CAAC;cAAE,GAAGD,UAAU;cAAEG,YAAY,EAAE;YAAe,CAAC,CAAC;UAClE;UACA;QACJ,KAAK,YAAY;UACbJ,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAG,mBAAkB,CAAE,CAAC;UAC/C;QACJ,KAAK,aAAa;UACdC,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAG,8BAA6B,CAAE,CAAC;UAC1DG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEI,WAAW,EAAE;UAAS,CAAC,CAAC;UACvD;QACJ,KAAK,WAAW;UACZL,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAG,mCAAkC,CAAE,CAAC;UAC/DG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEK,QAAQ,EAAE,IAAI;YAAEC,UAAU,EAAG;UAAgB,CAAC,CAAC;UAC9E;QACJ,KAAK,SAAS;UACVP,UAAU,CAAC,CAAE,GAAGD,OAAO,EAAG,2BAA0B,CAAE,CAAC;UACvDG,aAAa,CAAC;YAAE,GAAGD,UAAU;YAAEK,QAAQ,EAAE,IAAI;YAAEE,MAAM,EAAE;UAAK,CAAC,CAAC;UAC9D;QACJ;UACI;MAAK;IAEjB;EAEJ,CAAC,EAAE,CAACd,cAAc,CAAC,CAAC;EAGpB,OAAO;IAAEO,UAAU;IAAEF,OAAO;IAAEF;EAAM,CAAC;AACzC;AAAC,GA1EuBJ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}